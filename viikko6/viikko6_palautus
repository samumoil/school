######################################
TEHTÄVÄ 1:
######################################

// ---------- tehtava1.java ----------
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class tehtava1 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage ikkuna) {

        // Luodaan laatikko ja käännetään se
        Rectangle laatikko = new Rectangle();
        laatikko.setHeight(110);
        laatikko.setWidth(60);
        laatikko.setFill(Color.WHITE);
        laatikko.setStroke(Color.BLACK);
        laatikko.setRotate(-45);

        // Luodaan nappi ja asetetaan sille toiminto
        Button nappi = new Button("Käännä");
        nappi.setOnAction(e -> laatikko.setRotate(laatikko.getRotate() + 45));

        // Luodaan paneeli ja asetetaan sisältö siihen
        BorderPane panneeli = new BorderPane();
        panneeli.setCenter(laatikko);
        panneeli.setLeft(nappi);
        BorderPane.setAlignment(nappi, Pos.CENTER_LEFT); // Tuodaan nappi keskelle ylä-ala-suunnssa

        // Asetetaan paneeli uuteen ikkunan sisältöön ja asetetaan ikkunan sisältö ikkunaan
        Scene ikkunanSisalto = new Scene(panneeli,500,500);
        ikkuna.setScene(ikkunanSisalto);
        ikkuna.setTitle("Kiännetään");
        ikkuna.show();
    }
}


######################################
TEHTÄVÄ 2:
######################################
// ---------- tehtava2.java ----------

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.BorderRepeat;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

import java.net.CacheRequest;

public class tehtava2 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage ikkuna) {
        // Annetaan ikkunan koko ensin, jotta voidaan käyttää sitä myöhemmin parissa kohdassa.
        ikkuna.setWidth(500);
        ikkuna.setHeight(500);
        ikkuna.setTitle("Katso kuinka pallo liikkuu");

        // Ympyrän luonti ja sijoittaminen ikkunan keskelle.
        int ympyranHalkaisija = 100;
        Circle ympyra = new Circle(ympyranHalkaisija, Color.WHITE);
        ympyra.setStroke(Color.BLACK);
        ympyra.setCenterX(ikkuna.getWidth()/2);
        ympyra.setCenterY(ikkuna.getHeight()/2);
        Pane ympyraPane = new Pane();
        ympyraPane.getChildren().add(ympyra);

        // Napit, niiden BorderPane sekä sijoittelu omien lokeroiden keskelle.
        Button ylos = new Button("Ylös");
        Button alas = new Button("Alas");
        Button vasen = new Button("Vasen");
        Button oikea = new Button("Oikea");
        BorderPane nappiPaneeli = new BorderPane();
        nappiPaneeli.setLeft(vasen);
        nappiPaneeli.setRight(oikea);
        nappiPaneeli.setTop(ylos);
        nappiPaneeli.setBottom(alas);
        BorderPane.setAlignment(vasen, Pos.CENTER);
        BorderPane.setAlignment(oikea, Pos.CENTER);
        BorderPane.setAlignment(ylos, Pos.CENTER);
        BorderPane.setAlignment(alas, Pos.CENTER);

        // Nappipaneeli sekä ympyräpaneeli laitetaan päällekäin.
        StackPane keskitysPaneeli = new StackPane(ympyraPane, nappiPaneeli);
        Scene ikkunanSisalto = new Scene(keskitysPaneeli);
        ikkuna.setScene(ikkunanSisalto);
        ikkuna.show();

        // Toimintalogiikkka nappien painamiselle.
        int askel = 50;
        ylos.setOnAction(e -> {
            if (ympyra.getCenterY() > ympyranHalkaisija + askel) // Onko ympyrän keskipisteen ja laidan välissä tarpeeksi tilaa ottaa yksi "askel"?
                ympyra.setCenterY(ympyra.getCenterY() - askel); // Siirry yksi askel.
            else // Jos ei ole tarpeeksi tilaa kokonaiselle askeleelle, siirry koskettamaan reunaa.
                ympyra.setCenterY(ympyranHalkaisija);
        });
        vasen.setOnAction(e -> {
            if (ympyra.getCenterX() > ympyranHalkaisija + askel )
                ympyra.setCenterX(ympyra.getCenterX() - askel);
            else
                ympyra.setCenterX(ympyranHalkaisija);
        });
        alas.setOnAction(e -> {
            if (ympyra.getCenterY() < ikkuna.getHeight()-ympyranHalkaisija - askel) // Hyödynnetään tietoa ikkunan koosta.
                ympyra.setCenterY(ympyra.getCenterY() + askel);
            else
                ympyra.setCenterY(ikkuna.getHeight()-ympyranHalkaisija);
        });
        oikea.setOnAction(e -> {
            if (ympyra.getCenterX() < ikkuna.getWidth()-ympyranHalkaisija - askel)
                ympyra.setCenterX(ympyra.getCenterX() + askel);
            else
                ympyra.setCenterX(ikkuna.getWidth()-ympyranHalkaisija);
        });
    }
}



######################################
TEHTÄVÄ 3:
######################################

// ---------- tehtava3.java ----------
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.geometry.HPos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class tehtava3 extends Application {
    private TextField tfSijoituksenMaara = new TextField();
    private TextField tfVuosienMaara = new TextField();
    private TextField tfVuosiKorko = new TextField();
    private TextField tfTuottoOdotus = new TextField();
    private Button btLaske = new Button("Laske");

    @Override
    public void start(Stage alkuIkkuna)
    {  // luodaan paneeli
        GridPane paneeli = new GridPane();
        // asetetaan tilaa solujen välille
        paneeli.setHgap(5);
        paneeli.setVgap(5);
        // lisätään solmut
        paneeli.add(new Label("Sijoituksen määrä: "),0,0);
        paneeli.add(tfSijoituksenMaara, 1, 0);
        paneeli.add(new Label("Vuosien määrä "),0,1);
        paneeli.add(tfVuosienMaara, 1, 1);
        paneeli.add(new Label("Vuosikorko % "), 0,2);
        paneeli.add(tfVuosiKorko, 1, 2);
        paneeli.add(btLaske, 1, 3);
        paneeli.add(new Label("Tuotto odotus: "), 0,4);
        paneeli.add(tfTuottoOdotus, 1,4);

        // määritellään asettelua
        paneeli.setAlignment(Pos.CENTER);
        tfSijoituksenMaara.setAlignment(Pos.BOTTOM_RIGHT);
        tfVuosiKorko.setAlignment(Pos.BOTTOM_RIGHT);
        tfVuosienMaara.setAlignment(Pos.BOTTOM_RIGHT);
        tfTuottoOdotus.setAlignment(Pos.BOTTOM_RIGHT);
        // asetetaan ettei voi muokata
        tfTuottoOdotus.setEditable(false);

        // käsitellään tapahtumat
        btLaske.setOnAction(e -> laskeTuottoOdotus());


        Scene kehys = new Scene(paneeli, 400, 250);
        alkuIkkuna.setTitle("Ja rahaa tulee");
        alkuIkkuna.setScene(kehys);
        alkuIkkuna.show();
    }

    private void laskeTuottoOdotus()
    {
        // luetaan arvot kentistä
        double korko = Double.parseDouble(tfVuosiKorko.getText());
        int vuosi = Integer.parseInt(tfVuosienMaara.getText());
        double sijoitusMaara = Double.parseDouble(tfSijoituksenMaara.getText());

        // muodostetaan sijoitusolio
        Sijoitus sijoitus1 = new Sijoitus(korko, vuosi, sijoitusMaara);

        // näytetään tiedot
        tfTuottoOdotus.setText(String.format("%.2f", sijoitus1.getTuottoOdotus()));
    }

    public static void main(String [] args)
    {
        Application.launch(args);
    }
}

// ---------- Sijoitus.java ----------

import static java.lang.Double.parseDouble;

public class Sijoitus
{
    private double vuosiKorko;
    private int vuosienMaara;
    private double sijoituksenMaara;

    public Sijoitus()
    {
        this(2.5, 1, 1000);
    }

    public Sijoitus(double vuosiKorko, int vuosienMaara, double sijoituksenMaara)
    {
        this.vuosiKorko = vuosiKorko;
        this.vuosienMaara = vuosienMaara;
        this.sijoituksenMaara = sijoituksenMaara;
    }

    public double getVuosiKorko()
    {
        return this.vuosiKorko;
    }

    public void setVuosiKorko(double vuosiKorko)
    {
        this.vuosiKorko = vuosiKorko;
    }

    public int getVuosienMaara()
    {
        return this.vuosienMaara;
    }

    public void setVuosienMaara(int vuosienMaara)
    {
        this.vuosienMaara = vuosienMaara;
    }

    public double getSijoituksenMaara()
    {
        return this.sijoituksenMaara;
    }

    public void setSijoituksenMaara(double sijoituksenMaara)
    {
        this.sijoituksenMaara = sijoituksenMaara;
    }

    public double getTuottoOdotus() {
        return sijoituksenMaara * Math.pow((1+vuosiKorko/100), vuosienMaara);
    }
}

######################################
TEHTÄVÄ 4:
######################################

// ---------- tehtava4.java ----------
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class tehtava4 extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage lava) {
        // Luodaan olio apuluokasta.
        tehtava4_hirsipuu hirsipuu = new tehtava4_hirsipuu();

        // Laitetaan tämän luokan käyttämä paneeli osoittamaan hirsipuu-olion
        // "paneeli"-muuttujan muistiosoitteeseen. Nyt hirsipuu-oliossa tehtävät
        // muutokset näkyvät täälläkin.
        Pane paneeli = hirsipuu.paneeli;

        paneeli.setOnMouseClicked(hirsipuu);

        Scene kehys = new Scene(paneeli);
        lava.setScene(kehys);
        lava.setHeight(432);
        lava.setWidth(321);
        lava.setTitle("Tehtävä 4");
        lava.show();
    }
}

// ---------- tehtava4_hirsipuu.java ----------
import javafx.event.EventHandler;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Ellipse;
import javafx.scene.shape.Line;

class tehtava4_hirsipuu implements EventHandler<MouseEvent> {
    // Luodaan paneeli, hirsipuun osat sekä hahmo. Jostain syystä tässä ei voi
    // muuttaa niiden väriä.
    Pane paneeli = new Pane();
    Ellipse ellipsi = new Ellipse(160,350,160,60);
    Line pystypuu = new Line(90,10,90,300);
    Line poikkipuu = new Line(90,10,200,10);
    Line naru = new Line(180,10,180,40);
    Circle paa = new Circle(180,70,30, Color.RED);
    Line vartalo = new Line(180,100,180,200);
    Line kasiVasen = new Line(180,120,160,170);
    Line kasiOikea = new Line(180,120,200,170);
    Line jalkaVasen = new Line(180,200,160,240);
    Line jalkaOikea = new Line(180,200, 200, 240);

    // Hyödynnetään alustajaa, joka muuttaa värit oikein.
    public tehtava4_hirsipuu() {
        ellipsi.setFill(Color.YELLOW);
        ellipsi.setStroke(Color.BLACK);
        naru.setStroke(Color.RED);
        paa.setStroke(Color.BLACK);
        vartalo.setStroke(Color.RED);
        kasiVasen.setStroke(Color.RED);
        kasiOikea.setStroke(Color.RED);
        jalkaVasen.setStroke(Color.RED);
        jalkaOikea.setStroke(Color.RED);
    }

    // Tämä metodi hoitaa tapahtumien ohjaamisen.
    @Override
    public void handle(MouseEvent e) {
        if (!e.isShiftDown() && !paneeli.getChildren().contains(ellipsi))
            paneeli.getChildren().add(ellipsi);
        else if (!e.isShiftDown() && !paneeli.getChildren().contains(pystypuu))
            paneeli.getChildren().add(pystypuu);
        else if (!e.isShiftDown() && !paneeli.getChildren().contains(poikkipuu))
            paneeli.getChildren().add(poikkipuu);
        else if (!e.isShiftDown() && !paneeli.getChildren().contains(naru))
            paneeli.getChildren().add(naru);
        else if (e.isShiftDown() && paneeli.getChildren().contains(naru) && !paneeli.getChildren().contains(paa))
            paneeli.getChildren().add(paa);
        else if (e.isShiftDown() && paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(vartalo))
            paneeli.getChildren().add(vartalo);
        else if (e.isShiftDown() && paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(kasiVasen))
            paneeli.getChildren().add(kasiVasen);
        else if (e.isShiftDown() && paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(kasiOikea))
            paneeli.getChildren().add(kasiOikea);
        else if (e.isShiftDown() && paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(jalkaVasen))
            paneeli.getChildren().add(jalkaVasen);
        else if (e.isShiftDown() && paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(jalkaOikea))
            paneeli.getChildren().add(jalkaOikea);
    }
}



######################################
TEHTÄVÄ 5:
######################################

// ---------- tehtava5.java ----------
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class tehtava5 extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage lava) {

        String arvattavaSana = "kirjaimet";

        // Luodaan hirsipuu-olio apuluokasta.
        tehtava5_hirsipuu hirsipuuOlio = new tehtava5_hirsipuu();
        // Laitetaan tämän luokan käyttämä paneeli osoittamaan hirsipuu-olion
        // "paneeli"-muuttujan muistiosoitteeseen. Nyt hirsipuu-oliossa tehtävät
        // muutokset näkyvät täälläkin.
        Pane hirsipuuPaneeli = hirsipuuOlio.paneeli;
        //hirsipuuPaneeli.setOnMouseClicked(hirsipuuOlio);

        // Luodaan olio kirjainnäytöstä. Toteutetaan samanlainen muistiosoitteeseen viittaus tässäkin.
        tehtava5_kirjainNaytto kirjainNayttoOlio = new tehtava5_kirjainNaytto(arvattavaSana);
        GridPane kirjainNayttoPaneeli = kirjainNayttoOlio.kirjainRivi;

        VBox lopputulosNaytto = new VBox();
        lopputulosNaytto.setAlignment(Pos.TOP_RIGHT);

        StackPane yhdistettyPaneeli = new StackPane(hirsipuuPaneeli, kirjainNayttoPaneeli, lopputulosNaytto);
        Scene kehys = new Scene(yhdistettyPaneeli);

        kehys.setOnKeyTyped(e -> {
            char arvausLower = Character.toLowerCase(e.getCharacter().charAt(0));
            if (Character.isAlphabetic(arvausLower)) {
                if (!kirjainNayttoOlio.tarkistaja(arvausLower)) {
                    hirsipuuOlio.vaarinMeni();
                }
            }
            if (hirsipuuOlio.getHavisitPelin()) {
                lopputulosNaytto.getChildren().add(new Text("HÄVISIT!"));
            }
            if (kirjainNayttoOlio.getVoititPelin()) {
                lopputulosNaytto.getChildren().add(new Text("Oikea sana oli: \n" + kirjainNayttoOlio.getSana().toUpperCase() + "\nVoitit pelin!"));
            }
        });

        lava.setScene(kehys);
        lava.setHeight(432);
        lava.setWidth(321);
        lava.setTitle("Tehtävä 5");
        lava.show();
    }
}



// ---------- tehtava5_hirsipuu.java ----------
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Ellipse;
import javafx.scene.shape.Line;

class tehtava5_hirsipuu {
    // Luodaan paneeli, hirsipuun osat sekä hahmo. Jostain syystä tässä ei voi
    // muuttaa niiden väriä.
    Pane paneeli = new Pane();
    Ellipse ellipsi = new Ellipse(160,350,160,60);
    Line pystypuu = new Line(90,10,90,300);
    Line poikkipuu = new Line(90,10,200,10);
    Line naru = new Line(180,10,180,40);
    Circle paa = new Circle(180,70,30, Color.RED);
    Line vartalo = new Line(180,100,180,200);
    Line kasiVasen = new Line(180,120,160,170);
    Line kasiOikea = new Line(180,120,200,170);
    Line jalkaVasen = new Line(180,200,160,240);
    Line jalkaOikea = new Line(180,200, 200, 240);
    private boolean havisitPelin = false;

    // Hyödynnetään alustajaa, joka muuttaa värit oikein.
    public tehtava5_hirsipuu() {
        ellipsi.setFill(Color.YELLOW);
        ellipsi.setStroke(Color.BLACK);
        naru.setStroke(Color.RED);
        paa.setStroke(Color.BLACK);
        vartalo.setStroke(Color.RED);
        kasiVasen.setStroke(Color.RED);
        kasiOikea.setStroke(Color.RED);
        jalkaVasen.setStroke(Color.RED);
        jalkaOikea.setStroke(Color.RED);
    }

    public void vaarinMeni() {
        if (!paneeli.getChildren().contains(ellipsi))
            paneeli.getChildren().add(ellipsi);
        else if (!paneeli.getChildren().contains(pystypuu))
            paneeli.getChildren().add(pystypuu);
        else if (!paneeli.getChildren().contains(poikkipuu))
            paneeli.getChildren().add(poikkipuu);
        else if (!paneeli.getChildren().contains(naru))
            paneeli.getChildren().add(naru);
        else if (paneeli.getChildren().contains(naru) && !paneeli.getChildren().contains(paa))
            paneeli.getChildren().add(paa);
        else if (paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(vartalo))
            paneeli.getChildren().add(vartalo);
        else if (paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(kasiVasen))
            paneeli.getChildren().add(kasiVasen);
        else if (paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(kasiOikea))
            paneeli.getChildren().add(kasiOikea);
        else if (paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(jalkaVasen))
            paneeli.getChildren().add(jalkaVasen);
        else if (paneeli.getChildren().contains(naru)  && !paneeli.getChildren().contains(jalkaOikea)) {
            paneeli.getChildren().add(jalkaOikea);
            havisitPelin = true; // Viimeisen piirron yhteydessä merkitään tämä.
        }

    }

    public boolean getHavisitPelin() {
        return havisitPelin;
    }
}


// ---------- tehtava5_kirjainNaytto.java ----------
import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;

class tehtava5_kirjainNaytto {
    GridPane kirjainRivi = new GridPane(5, 5);
    private String sana;
    private char[] sanaArray;
    private boolean voititPelin = false;

    public tehtava5_kirjainNaytto(String annettuSana) {
        this.sana = annettuSana.toLowerCase();
        sanaArray = new char[sana.length()];
        for (int i = 0; i < sana.length(); i++) {
            sanaArray[i] = (annettuSana.toLowerCase()).charAt(i);
            kirjainRivi.add(new Text("_"), i, 0);
        }
    }
    public boolean tarkistaja(char arvausLower) {
        boolean olikoOikein = false;
        kirjainRivi.getChildren().clear(); // Tyhjennetään gridpane ja seuraavaksi täytetään se uudestaan.

        // Tarkastus
        for (int i = 0; i < sana.length(); i++) { // Käydään läpi aiemmin tallennettu sana kirjain kerrallaan.
            if (Character.toLowerCase(sanaArray[i]) == arvausLower) { // Verrataan arvausta taulukosta löytyvään pieneen kirjaimeen.
                sanaArray[i] = Character.toUpperCase(arvausLower); // Merkitään uudet oikeat arvaukset isolla kirjaimella.
                olikoOikein = true;

                // Jokaisen oikean arvauksen jälkeen tarkastetaan, onko jäljellä arvattavia kirjaimia.
                boolean voittoTarkastaja = true;
                for (char j : sanaArray) {
                    if (Character.isLowerCase(j)) voittoTarkastaja = false;
                }
                if (voittoTarkastaja) voititPelin = true;
            }
        }
        // Uuden rivin kirjaus
        for (int i = 0; i < sana.length(); i++) {
            if (Character.isUpperCase(sanaArray[i])) {
                kirjainRivi.add(new Text(Character.toString(sanaArray[i])), i, 0); // Merkitään oikein arvattu kirjain taulukkoon isona.
            } else {
                kirjainRivi.add(new Text("_"), i, 0); // Väärät arvaukset on yhä merkitty alaviivalla.
            }

        }
        return olikoOikein;
    }

    public boolean getVoititPelin() {  return voititPelin;  }
    public String getSana() {  return sana;  }
}


######################################
TEHTÄVÄ 6:
######################################

// ---------- Kurssi.java ----------

// ---------- Main.java ----------



######################################
TEHTÄVÄ 7:
######################################

// ---------- Kurssi.java ----------

// ---------- Main.java ----------

