######################################
TEHTÄVÄ 1:
######################################

Vastaus kysymykseen: Säikeet vuorottelevat satunnaisesti.


// ---------- tehtava1.java ----------
package test.viikko8;

public class tehtava1 {
    private final static String lause1 = new String("Ensimmäinen on ensimmäinen!");
    private final static String lause2 = new String("Toinen jää kotiin...");
    private final static String lause3 = new String("Kolmas menee syömään.");
    private static Tulostaja tulostaja = new Tulostaja();


    public static class Tulostaja {
        public void tulosta(String teksti) {
            System.out.println(teksti);
        }
    }

    public static class Juoksija implements Runnable {
        String tulostettavaTeksti;
        public Juoksija(String teksti){
            this.tulostettavaTeksti = teksti;
        }
        @Override
        public void run() {
            int laskuri = 0;
            while (laskuri < 100) {
                laskuri++;
                tulostaja.tulosta(tulostettavaTeksti + laskuri);
            }
        }
    }

    public static void main(String[] args) {

        Thread saie1 = new Thread(new Juoksija(lause1));
        Thread saie2 = new Thread(new Juoksija(lause2));
        Thread saie3 = new Thread(new Juoksija(lause3));

        saie1.start();
        saie2.start();
        saie3.start();
    }
}



######################################
TEHTÄVÄ 2:
######################################

Vastaus kysymykseen: Minulla parhaiten toimi sleep-metodi.

// ---------- tehtava2_yield.java ----------
package test.viikko8;

public class tehtava2_yield {
    private final static String lause1 = new String("Ensimmäinen on ensimmäinen!");
    private final static String lause2 = new String("Toinen jää kotiin...");
    private final static String lause3 = new String("Kolmas menee syömään.");


    static class Tulostaja implements Runnable {
        private String tulostettavaTeksti;
        public Tulostaja(String teksti) {
            this.tulostettavaTeksti = teksti;
        }
        @Override
        public void run(){
            int laskuri = 0;
            while (laskuri < 100) {
                laskuri++;
                System.out.println(tulostettavaTeksti + laskuri);
                Thread.yield();
            }
        }
    }


    public static void main(String[] args) {
        Thread saie1 = new Thread(new Tulostaja(lause1));
        Thread saie2 = new Thread(new Tulostaja(lause2));
        Thread saie3 = new Thread(new Tulostaja(lause3));

        saie1.start();
        saie2.start();
        saie3.start();
    }
}



// ---------- tehtava2_sleep.java ----------

package test.viikko8;

public class tehtava2_sleep {

    private final static String lause1 = new String("Ensimmäinen on ensimmäinen!");
    private final static String lause2 = new String("Toinen jää kotiin...");
    private final static String lause3 = new String("Kolmas menee syömään.");


    static class Tulostaja implements Runnable {
        private String tulostettavaTeksti;

        public Tulostaja(String teksti) {
            this.tulostettavaTeksti = teksti;
        }

        @Override
        public void run() {
            try {
                int laskuri = 0;
                while (laskuri < 100) {
                    laskuri++;
                    System.out.println(tulostettavaTeksti + laskuri);
                    Thread.sleep(20);
                }
            } catch (InterruptedException ex) {
            }
        }
    }

    public static void main(String[] args) {
        Thread saie1 = new Thread(new Tulostaja(lause1));
        Thread saie2 = new Thread(new Tulostaja(lause2));
        Thread saie3 = new Thread(new Tulostaja(lause3));

        saie1.start();
        saie2.start();
        saie3.start();
    }
}


// ---------- tehtava2_sync.java ----------

package test.viikko8;

import java.util.SplittableRandom;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class tehtava2_sync {
    private final static String lause1 = new String("Ensimmäinen on ensimmäinen!");
    private final static String lause2 = new String("Toinen jää kotiin...");
    private final static String lause3 = new String("Kolmas menee syömään.");
    private static Tulostaja tulostaja = new Tulostaja();


    public static class Tulostaja {
        public synchronized void tulosta(String teksti) {
            System.out.println(teksti);
        }
    }
    public static class Juoksija implements Runnable {
        String tulostettavaTeksti;
        public Juoksija(String teksti){
            this.tulostettavaTeksti = teksti;
        }
        @Override
        public void run() {
            int laskuri = 0;
            while (laskuri < 100) {
                laskuri++;
                tulostaja.tulosta(tulostettavaTeksti + laskuri);
            }
        }
    }
    public static void main(String[] args) {

        Thread saie1 = new Thread(new Juoksija(lause1));
        Thread saie2 = new Thread(new Juoksija(lause2));
        Thread saie3 = new Thread(new Juoksija(lause3));

        saie1.start();
        saie2.start();
        saie3.start();
    }
}





######################################
TEHTÄVÄ 3:
######################################

Vastaus kysymykseen: Jokainen säie suoritetaan ensin kokonaan loppuun, ennen kuin seuraava alkaa.


// ---------- tehtava3.java ----------
package test.viikko8;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class tehtava3 {
    private final static String lause = new String("Tulostettava lause.");
    private static Tulostaja tulostaja = new Tulostaja();


    public static class Tulostaja {
        public void tulosta(String teksti) {
            System.out.println(teksti);
        }
    }

    public static class Juoksija implements Runnable {
        String tulostettavaTeksti;
        int saikeenNro;
        public Juoksija(String teksti, int saikeenNro){
            this.tulostettavaTeksti = teksti;
            this.saikeenNro = saikeenNro;
        }
        @Override
        public void run() {
            int laskuri = 0;
            while (laskuri < 10) {
                laskuri++;
                tulostaja.tulosta(tulostettavaTeksti + " " + saikeenNro + " " + laskuri);
            }
        }
    }
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(100);

        int i = 0;
        while (i < 100) {
            i++;
            executor.execute(new Juoksija(lause, i));
        }

        executor.shutdown();
    }
}



######################################
TEHTÄVÄ 4:
######################################

Vastaus kysymykseen: Kokeilin ensin pelkästään synkronointia. Sen
jälkeen lisäsin sleep(50), joka sekoitti säikeiden järjestystä. Kaikki 100 säiettä suorittivat
ensimmäisen askeleen kymmenestä ja siirtyivät sen jälkeen toiseen askeleeseen. Yield-metodi ei muuta
tilannetta ollenkaan.

Sekoituksen sai yhdistämällä yield-metodin sekä Executors.newCachedThreadPool().


// ---------- Tehtava4.java ----------
package test.viikko8;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class tehtava4 {
    private final static String lause = new String("Tulostettava lause.");
    private static Tulostaja tulostaja = new Tulostaja();


    public static class Tulostaja {
        public synchronized void tulosta(String teksti) {
        //public void tulosta(String teksti) {
            System.out.println(teksti);
        }
    }

    public static class Juoksija implements Runnable {
        String tulostettavaTeksti;
        int saikeenNro;
        public Juoksija(String teksti, int saikeenNro){
            this.tulostettavaTeksti = teksti;
            this.saikeenNro = saikeenNro;
        }
        /*
        @Override
        public void run() {
            int laskuri = 0;
            while (laskuri < 10) {
                try {
                    Thread.sleep(50);
                    laskuri++;
                    tulostaja.tulosta(tulostettavaTeksti + " " + saikeenNro + " " + laskuri);
                }
                catch (InterruptedException ex) {}
            }
        }
        */
        @Override
        public void run() {
            int laskuri = 0;
            while (laskuri < 10) {
                laskuri++;
                tulostaja.tulosta(tulostettavaTeksti + " " + saikeenNro + " " + laskuri);
                //Thread.yield();
            }
        }
    }
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(100);
        //ExecutorService executor = Executors.newCachedThreadPool();

        int i = 0;
        while (i < 100) {
            i++;
            executor.execute(new Juoksija(lause, i));
        }

        executor.shutdown();
    }
}





######################################
TEHTÄVÄ 5:
######################################

// ---------- tehtava5.java ----------
package test.viikko8;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

public class tehtava5 extends Application {
    private static Rectangle laatikko = new Rectangle(50, 100, Color.RED);
    Laatikkosaie saataja = new Laatikkosaie();

    public static class Laatikkosaie implements Runnable {
        @Override
        public void run(){
            if (laatikko.getFill() == Color.RED) {
                laatikko.setFill(Color.BLUE);
            }
            else {
                laatikko.setFill(Color.RED);
            }
        }
    }

    public static void main(String[] args) {  launch(args);  }

    @Override
    public void start(Stage primaryStage) {
        System.out.println(Color.RED);
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (true) {
                        Thread.sleep(500);
                        Platform.runLater(saataja);
                    }
                }
                catch (InterruptedException ex) {}
            }
        }).start();

        StackPane paneeliFinal = new StackPane(laatikko);
        Scene kehys = new Scene(paneeliFinal, 300, 400);
        primaryStage.setScene(kehys);
        primaryStage.setTitle("Laatikko vaihtaa väriä");
        primaryStage.show();
    }
}


######################################
TEHTÄVÄ 6:
######################################

// ---------- tehtava6.java ----------
package test.viikko8;

import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class tehtava6 {

    public static void main(String [] args) {

        // Luodaan lista ValintaLajittelun käyttöön
        Random arpa = new Random();
        final int N = 7000000;
        int [] listaOpe = new int [N];
        for (int i = 0; i < listaOpe.length; i++)
            listaOpe[i] = arpa.nextInt(10000000);

        // Kopioidaan sama lista oman lajittelualgoritmin käyttöön
        int [] listaOma = new int [N];
        System.arraycopy(listaOpe, 0, listaOma, 0, listaOpe.length);

        // Mitataan ja ajetaan ValintaLajittelu
        long alkuaikaOpe = System.currentTimeMillis();
        ValintaLajittelu.valintaLajittelu(listaOpe);
        long loppuaikaOpe = System.currentTimeMillis();

        // Mitataan ja ajetaan oma lajittelu
        long alkuaikaOma = System.currentTimeMillis();
        lajittelija(listaOma);
        long loppuaikaOma = System.currentTimeMillis();

        // Tulostetaan oman lajittelun tulokset näkyviin
        int tulostinLaskuri = 0;
        for (int luku : listaOma) {
            System.out.println("Oman lajittelun luku indeksillä " + tulostinLaskuri++ + " on " + luku);
        }

        // Tulostetaan aikavertailun tulokset
        System.out.println("\nValintaLajittelun nopeus oli " + (loppuaikaOpe-alkuaikaOpe) + " millisekuntia");
        System.out.println("Oman lajittelun nopeus oli " + (loppuaikaOma-alkuaikaOma) + " millisekuntia");
    }

    /**
     * Metodi perustaa haarautumispoolin ja käynnistää lajittelualgoritmin ensimmäisen iteraation.
     * @param lista on muotoa int[]
     */
    private static void lajittelija(int[] lista) {
        ForkJoinPool pooli = new ForkJoinPool();
        pooli.invoke(new LajitteluTehtava(lista));
    }

    /**
     * Lajittelualgoritmin ydin, joka haarauttaa itsensä, jos sen saaman listan pituus on suurempi kuin 500.
     */
    private static class LajitteluTehtava extends RecursiveAction {
        private final static int RAJA = 500;
        private int[] lista;

        /**
         * Constructor
         * @param lista
         */
        public LajitteluTehtava(int[] lista) {
            this.lista = lista;
        }

        /**
         * Kun tämä olio syötetään InvokeAll-metodille, niin tämä compute() ajetaan.
         */
        @Override
        public void compute() {
            if (lista.length < RAJA) {
                Arrays.sort(lista);
            }
            else {
                // valmistellaan ensimmäinen puolisko
                int[] ekaPuoli = new int[lista.length / 2];
                System.arraycopy(lista, 0, ekaPuoli, 0, lista.length / 2);

                // valmistellaan toinen puolisto
                int toisenPuolenPituus = lista.length - lista.length / 2;
                int [] toinenPuoli = new int[toisenPuolenPituus];
                System.arraycopy(lista, lista.length / 2, toinenPuoli, 0, toisenPuolenPituus);

                // Annetaan puoliskojen lajittelu uusille säikeille
                invokeAll(
                        new LajitteluTehtava(ekaPuoli),
                        new LajitteluTehtava(toinenPuoli)
                );

                // yhdistetään ekapuoli ja toinenpuoli
                ValintaLajittelu.yhdista(ekaPuoli, toinenPuoli, lista);
            }
        }
    }
}


// ---------- ValintaLajittelu.java ----------
package test.viikko8;

public class ValintaLajittelu {
    public static void valintaLajittelu(int [] lista) {
        if (lista.length > 1) {
            // lajitellaan ensimm�inen puolisko
            int[] ekaPuoli = new int[lista.length / 2];
            System.arraycopy(lista, 0, ekaPuoli, 0, lista.length / 2);
            valintaLajittelu(ekaPuoli);

            // lajitellaan toinen puolisto
            int toisenPuolenPituus = lista.length - lista.length / 2;
            int [] toinenPuoli = new int[toisenPuolenPituus];
            System.arraycopy(lista, lista.length / 2, toinenPuoli, 0, toisenPuolenPituus);
            valintaLajittelu(toinenPuoli);

            // yhdistetään ekapuoli ja toinenpuoli
            yhdista(ekaPuoli, toinenPuoli, lista);
        }
    }

    // yhdistetään kaksi lajiteltua listaa
    public static void yhdista(int[] lista1, int [] lista2, int [] tilap) {
        int nyk1 = 0; // listan 1 indeksi
        int nyk2 = 0; // listan 2 indeksi
        int nyk3 = 0; // listan 3 indeksi

        while (nyk1 < lista1.length && nyk2 < lista2.length) {
            if (lista1[nyk1] < lista2[nyk2])
                tilap[nyk3++] = lista1[nyk1++];
            else
                tilap[nyk3++] = lista2[nyk2++];
        }

        while (nyk1 < lista1.length)
            tilap[nyk3++] = lista1[nyk1++];

        while (nyk2 < lista2.length)
            tilap[nyk3++] = lista2[nyk2++];
    }

    // testi metodi
    public static void main(String [] args) {
        int[] lista = {2, 3, 2, 5, 6, 1, -2, 3, 14, 12};
        valintaLajittelu(lista);
        for (int i = 0; i < lista.length; i++)
            System.out.println(lista[i] + " ");
    }
}
