######################################
TEHTÄVÄ 1:
######################################

// ---------- tehtava1.java ----------
package test.viikko7;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.*;
import javafx.stage.Stage;
public class tehtava1 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage lava) {

        // Tämä on valotolpan koko. Jäänne valotolppa-tehtävästä aiemmalta viikolta.
        // Voit kokeilla muuttaa tätä.
        int koko = 20;

        // Luodaan olio luokasta tehtava1_valotolppa ja käytetään sen
        // getValotolppa-metodia, jolla saadaan pääohjelmaan liikennevalot
        // StackPane-muodossa.
        tehtava1_valotolppa valotolppaOlio = new tehtava1_valotolppa(koko);
        StackPane valotolppa = new StackPane(valotolppaOlio.getValotolppa());

        // Luodaan napit, nappiryhmä, paneeli napeille ja liitetään paneeliin.
        RadioButton nappiPun = new RadioButton("Punainen");
        RadioButton nappiKelt = new RadioButton("Keltainen");
        RadioButton nappiVihr = new RadioButton("Vihreä");
        RadioButton nappiJoku = new RadioButton("Joku");
        VBox nappiPaneeli = new VBox();
        nappiPaneeli.setPadding(new Insets(50,50,50,50));
        nappiPaneeli.setSpacing(10);
        nappiPaneeli.getChildren().addAll(nappiPun, nappiKelt, nappiVihr, nappiJoku);

        ToggleGroup nappiRyhma = new ToggleGroup();
        nappiPun.setToggleGroup(nappiRyhma);
        nappiKelt.setToggleGroup(nappiRyhma);
        nappiVihr.setToggleGroup(nappiRyhma);
        nappiJoku.setToggleGroup(nappiRyhma);

        // Nappien toiminnallisuus
        nappiPun.setOnAction(e -> valotolppaOlio.setPunainen());
        nappiKelt.setOnAction(e -> valotolppaOlio.setKeltainen());
        nappiVihr.setOnAction(e -> valotolppaOlio.setVihrea());
        nappiJoku.setOnAction(e -> valotolppaOlio.setRandom());

        // Asetellaan kaikki lopullisesti paikoilleen.
        BorderPane finalPane = new BorderPane();
        finalPane.setCenter(valotolppa);
        finalPane.setLeft(nappiPaneeli);
        nappiPaneeli.setAlignment(Pos.CENTER_LEFT);

        Scene kehys = new Scene(finalPane, (koko*10)+200,koko*20);
        lava.setScene(kehys);
        lava.setTitle("Aseta liikennevalo");
        lava.show();
    }
}


// ---------- tehtava1_valotolppa.java ----------
package test.viikko7;

import javafx.geometry.Pos;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import java.util.concurrent.ThreadLocalRandom;

public class tehtava1_valotolppa {
    // Luodaan nämä ennen alustajaa, jotta näihin voidaan viitata myöhemmissä
    // metodeissa.
    StackPane valotolppa = new StackPane();
    Circle ympyraPun = new Circle();
    Circle ympyraKelt = new Circle();
    Circle ympyraVihr = new Circle();
    public tehtava1_valotolppa(int koko) {
        ympyraPun.setRadius(koko);
        ympyraPun.setStroke(Color.BLACK);
        ympyraPun.setFill(Color.RED);

        ympyraKelt.setRadius(koko);
        ympyraKelt.setStroke(Color.BLACK);
        ympyraKelt.setFill(Color.YELLOW);

        ympyraVihr.setRadius(koko);
        ympyraVihr.setStroke(Color.BLACK);
        ympyraVihr.setFill(Color.GREEN);

        // Sijoitetaan pallot päällekkäin ja keskelle ruutua.
        VBox vertikaaliPallot = new VBox(koko/2);
        vertikaaliPallot.setAlignment(Pos.CENTER); // Ilman tätä pallot sijoittuvat vasempaan yläkulmaan.
        vertikaaliPallot.getChildren().addAll(ympyraPun, ympyraKelt, ympyraVihr);

        // Luodaan laatikko, joka tulee valojen ympärille.
        Rectangle laatikko = new Rectangle(
                koko*3,
                koko*8,
                Color.WHITE);
        laatikko.setStroke(Color.BLACK);

        // Luodaan laatikon ja pallojen muodostama "yläosa".
        Pane laatikkoJaPallot = new StackPane();
        laatikkoJaPallot.getChildren().addAll(laatikko, vertikaaliPallot);

        // Valotolpan jalka. Tämän koko suhteessa yläosaan on saatu kokeilemalla.
        Rectangle jalka = new Rectangle(
                laatikko.getWidth()/3,
                laatikko.getHeight()/5*4,
                Color.BROWN);
        jalka.setStroke(Color.BLACK);

        // Sijoitetaan valotolpan yläosa ja jalka päällekkäin.
        VBox valotolppaVBox = new VBox();
        valotolppaVBox.getChildren().addAll(laatikkoJaPallot, jalka);
        valotolppaVBox.setAlignment(Pos.CENTER);

        // Sijoitetaan vielä VBox StackPanen sisälle, jotta ne pysyvät keskenään
        // paikoillaan. StackPane on nyt valmis palautettavaksi seuraavassa metodissa.
        valotolppa.getChildren().addAll(valotolppaVBox);
    }

    public StackPane getValotolppa() {  return valotolppa;  }

    public StackPane setPunainen() {
        ympyraPun.setFill(Color.RED);
        ympyraKelt.setFill(Color.BLACK);
        ympyraVihr.setFill(Color.BLACK);
        return valotolppa;
    }
    public StackPane setKeltainen() {
        ympyraPun.setFill(Color.BLACK);
        ympyraKelt.setFill(Color.YELLOW);
        ympyraVihr.setFill(Color.BLACK);
        return valotolppa;
    }
    public StackPane setVihrea() {
        ympyraPun.setFill(Color.BLACK);
        ympyraKelt.setFill(Color.BLACK);
        ympyraVihr.setFill(Color.GREEN);
        return valotolppa;
    }
    public void setRandom() {
        // Luodaan satunnainen luku väliltä [1,4[
        int arpa = ThreadLocalRandom.current().nextInt(1, 4);

        if (arpa == 1) this.setPunainen();
        else if (arpa == 2) this.setKeltainen();
        else if (arpa == 3) this.setVihrea();
    }
}

######################################
TEHTÄVÄ 2:
######################################
// ---------- tehtava2.java ----------
package test.viikko7;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import javafx.scene.control.SelectionMode;
import javafx.scene.layout.BorderPane;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class tehtava2 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage lava) {

        String[] juuresLista = {"Porkkana", "Lanttu", "Punajuuri",
        "Nauris", "Retiisi", "Palsternakka", "Maa-artisokka"};
        ListView<String> listaNakyma = new ListView<>(
                FXCollections.observableArrayList(juuresLista));
        listaNakyma.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        String alkuTeksti = "Valitsit: ";
        Text tekstinNaytto = new Text(alkuTeksti);

        listaNakyma.getSelectionModel().selectedItemProperty().addListener(ov -> {
                    String uusiSana = alkuTeksti;
                    for (Integer i: listaNakyma.getSelectionModel().getSelectedIndices()) {
                        uusiSana = uusiSana + " " + juuresLista[i];
                    }
                    tekstinNaytto.setText(uusiSana);
                });

        BorderPane finalPane = new BorderPane();
        finalPane.setCenter(listaNakyma);
        finalPane.setBottom(tekstinNaytto);

        Scene kehys = new Scene(finalPane, 400,400);
        lava.setScene(kehys);
        lava.setTitle("Valitse juurekset kasviskeittoon:");
        lava.show();
    }
}


######################################
TEHTÄVÄ 3:
######################################

// ---------- tehtava3.java ----------
package test.viikko7;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class tehtava3 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage lava) {

        BorderPane finalPane = new BorderPane();

        // Luodaan kellotaulun olio
        tehtava3_kellopaneeli kello = new tehtava3_kellopaneeli();

        // Tekstit ja kentät
        Text tekstiTunnit = new Text("Tunnit");
        Text tekstiMinuutit = new Text("Minuutit");
        Text tekstiSekunnit = new Text("Sekunnit");
        TextField kenttaTunnit = new TextField();
        TextField kenttaMinuutit = new TextField();
        TextField kenttaSekunnit = new TextField();
        HBox tekstiPaneeli = new HBox();
        tekstiPaneeli.getChildren().addAll(tekstiTunnit, kenttaTunnit,
                tekstiMinuutit, kenttaMinuutit, tekstiSekunnit, kenttaSekunnit);
        tekstiPaneeli.setSpacing(10);

        // Asetellaan asiat paikoilleen
        finalPane.setCenter(kello);
        finalPane.setTop(tekstiPaneeli);

        // Toiminnallisuudet
        kenttaTunnit.setOnAction(e -> {
            kello.setTunti(Integer.parseInt(kenttaTunnit.getText()));
            kenttaTunnit.clear();
        });
        kenttaMinuutit.setOnAction(e -> {
            kello.setMinuutti(Integer.parseInt(kenttaMinuutit.getText()));
            kenttaMinuutit.clear();
        });
        kenttaSekunnit.setOnAction(e -> {
            kello.setSekunti(Integer.parseInt(kenttaSekunnit.getText()));
            kenttaSekunnit.clear();
        });


        Scene kehys = new Scene(finalPane, 400,400);
        lava.setScene(kehys);
        lava.setTitle("Aseta kellolle aika");
        lava.show();
    }
}


// ---------- tehtava3_kellopaneeli.java ----------
package test.viikko7;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.shape.Line;
import javafx.scene.shape.Circle;
/**
 Kellopaneeli
 */
public class tehtava3_kellopaneeli extends Pane
{
    private int tunti;
    private int minuutti;
    private int sekunti;
    // kellon leveys ja korkeus
    private double leveys = 250, korkeus = 250;
    // oletus alustaja
    public tehtava3_kellopaneeli()
    {
        this.tunti = 1;
        this.minuutti = 1;
        this.sekunti = 2;
        piirraKello();
    }
    // alustaja tietyllä kellonajalla
    public tehtava3_kellopaneeli(int tunti, int minuutti, int sekunti)
    {
        this.tunti = tunti;
        this.minuutti = minuutti;
        this.sekunti = sekunti;
        piirraKello();
    }
    public int getTunti()
    {
        return this.tunti;
    }
    public void setTunti(int tunti)
    {
        this.tunti = tunti;
        piirraKello();
    }
    public int getMinuutti()
    {
        return this.minuutti;
    }
    public void setMinuutti(int minuutti)
    {
        this.minuutti = minuutti;
        piirraKello();
    }
    public int getSekunti()
    {
        return this.sekunti;
    }
    public void setSekunti(int sekunti)
    {
        this.sekunti = sekunti;
        piirraKello();
    }
    public double getLeveys()
    {
        return this.leveys;
    }
    public void setLeveys(double leveys)
    {
        this.leveys = leveys;
        piirraKello();
    }
    public double getKorkeus()
    {
        return this.korkeus;
    }
    public void setKorkeus(double korkeus)
    {
        this.korkeus = korkeus;
        piirraKello();
    }
    // piirretään kellotaulu ja siihen viisarit
    protected void piirraKello()
    {
        double kellonSade = Math.min(leveys, korkeus) * 0.8 * 0.5;
        double keskusX = leveys / 2;
        double keskusY = korkeus / 2;
        // piirretään kellotaulu
        Circle ympyra = new Circle(keskusX, keskusY, kellonSade);
        ympyra.setFill(Color.WHITE);
        ympyra.setStroke(Color.BLACK);
        Text t1 = new Text(keskusX -5, keskusY - kellonSade + 12, "12");
        Text t2 = new Text(keskusX - kellonSade + 3, keskusY + 5, "9");
        Text t3 = new Text(keskusX + kellonSade - 10, keskusY + 3, "3");
        Text t4 = new Text(keskusX -3, keskusY + kellonSade - 3, "6");
        // piirretään punainen sekuntiviisari
        double sPituus = kellonSade * 0.8;
        double sekuntiX = keskusX + sPituus *
                Math.sin(sekunti * (2 * Math.PI / 60));
        double sekuntiY = keskusY - sPituus *
                Math.cos(sekunti * (2 * Math.PI / 60));
        Line sViiva = new Line(keskusX, keskusY, sekuntiX, sekuntiY);
        sViiva.setStroke(Color.RED);
        // piirretään minuuttiviisari joka lyhyempi ja sininen
        double mPituus = kellonSade * 0.65;
        double minuuttiX = keskusX + mPituus *
                Math.sin(minuutti * (2 * Math.PI / 60));
        double minuuttiY = keskusY - mPituus *
                Math.cos(minuutti * (2 * Math.PI / 60));
        Line mViiva = new Line(keskusX, keskusY, minuuttiX, minuuttiY);
        mViiva.setStroke(Color.BLUE);
        // piirretään tuntiviisari joka lyhempi ja vihreä
        double tPituus = kellonSade * 0.5;
        double tuntiX = keskusX + tPituus *
                Math.sin((tunti % 12 + minuutti / 60.0) * (2 * Math.PI / 12));
        double tuntiY = keskusY - tPituus *
                Math.cos((tunti % 12 + minuutti / 60.0) * (2 * Math.PI / 12));
        Line tViiva = new Line(keskusX, keskusY, tuntiX, tuntiY);
        tViiva.setStroke(Color.GREEN);

        // tyhjennetään ja lisätään solmut
        this.getChildren().clear();
        this.getChildren().addAll(ympyra, t1, t2, t3, t4, sViiva, mViiva, tViiva);
    }
}

######################################
TEHTÄVÄ 4:
######################################

// ---------- tehtava4.java ----------
package test.viikko7;

import javafx.application.Application;
import javafx.geometry.Orientation;
import javafx.scene.Scene;
import javafx.scene.control.Slider;
import javafx.scene.layout.BorderPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class tehtava4 extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage lava) {
        // Luodaan lopullinen paneeli jo tässä vaiheessa, jotta voidaan liittää siihen asiat.
        BorderPane finalPane = new BorderPane();

        // Teksti
        Text teksti = new Text("Muokkaa minua!");
        teksti.setFill(Color.rgb(255/2, 0, 255/2));
        teksti.setFont(Font.font(30));
        finalPane.setCenter(teksti);

        // Liukukytkimet
        Slider liukuVaaka = new Slider();
        Slider liukuPysty = new Slider();
        liukuPysty.setOrientation(Orientation.VERTICAL);
        finalPane.setRight(liukuPysty);
        finalPane.setBottom(liukuVaaka);

        // Toiminnallisuus
        liukuVaaka.valueProperty().addListener(e -> {
            int pun = (int) (255 * (liukuVaaka.getValue()/liukuVaaka.getMax()));
            int sin = (int) (255 * (1-liukuVaaka.getValue()/liukuVaaka.getMax()));
            teksti.setFill(Color.rgb(pun,0, sin));
        });
        liukuPysty.valueProperty().addListener(e -> {
            teksti.setFont(Font.font(
                    2+65*(liukuPysty.getValue()/liukuPysty.getMax())));
        });

        Scene kehys = new Scene(finalPane, 600,400);
        lava.setScene(kehys);
        lava.setTitle("Väriä elämään!");
        lava.show();
    }
}




######################################
TEHTÄVÄ 5:
######################################

// ---------- Kurssi.java ----------

// ---------- Main.java ---------- 


######################################
TEHTÄVÄ 6:
######################################

// ---------- Kurssi.java ----------

// ---------- Main.java ---------- 



######################################
TEHTÄVÄ 7:
######################################

// ---------- Kurssi.java ----------

// ---------- Main.java ---------- 

