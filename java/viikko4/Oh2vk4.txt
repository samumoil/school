Tehtävä 1.
abstract public class C {
    private int a;
    int b;

    public int getA() {
        return a;
    }

    public void setA(int a) {
        this.a = a;
    }

    public int getB() {
        return b;
    }

    public void setB(int b) {
        this.b = b;
    }
    abstract public double laske(int x, int y);
}




// Luodaan aliluokka D
public class D extends C {
    // A ja B kohdat
    private double d1;

    protected double d2;

    // Setterit ja getterit
    public double getD1() {
        return d1;
    }

    public void setD1(double d1) {
        this.d1 = d1;
    }

    public double getD2() {
        return d2;
    }

    public void setD2(double d2) {
        this.d2 = d2;
    }

    //Laske metodi joka korvaa yliluokan abstraktin metodin laske
    @java.lang.Override
    public double laske(int x, int y) {
        return getA()*getB();
    }

    public static void main(String[] args) {
        // Luodaan D olio, koska se toteuttaa myös luokan C ominaisuudet
        D olio = new D();
        olio.setA(3);
        olio.setB(2);
        // laske metodin sisälle olevia x ja y:tä ei käytetä mihinkään, outoa :P
        System.out.println(olio.laske(6,9));
        // Testataan vielä setterien ja getterien toimivuudet
        olio.setD1(1);
        olio.setD2(6);
        System.out.println("Tässä D1 arvo: " + olio.getD1());
        System.out.println("Tässä D2 arvo: " + olio.getD2());
    }
}


Tehtävä 2.


public interface Niminen {
    // A
    public void setNimi(String n);

    // B
    public String getNimi();
}




public class Henkilo implements Niminen{
    private String nimi;


    @Override
    public void setNimi(String n) {
        this.nimi=n;
    }

    @Override
    public String getNimi() {
        return this.nimi;
    }

    public static void main(String[] args) {
        Henkilo henk = new Henkilo();
        henk.setNimi("Jorma");
        System.out.println(henk.getNimi());
    }
}


Tehtävä 3.

public class Tentti implements Erinomainen {
    private double pisteet;

    public void setPisteet(double p) {
        this.pisteet = p;
    }

    public double getPisteet() {
        return this.pisteet;
    }

    public int getArvosana() {
        int arvosana;

        if (this.pisteet >= 90) {
            arvosana = 5;
        } else if (this.pisteet >= 80) {
            arvosana = 4;
        } else if (this.pisteet >= 70) {
            arvosana = 3;
        } else if (this.pisteet >= 60) {
            arvosana = 2;
        } else if (this.pisteet >= 50) {
            arvosana = 1;
        } else {
            arvosana = 0;
        }
        return arvosana;
    }
}




public class Kirjoitelma extends Tentti{
    // Luodaan eri osoille omat muuttujat
    private double kielioppi;

    private double oikeinkirjoitus;

    private double oikea_pituus;

    private double sisalto;


    //Getterit ja setterit
    public double getKielioppi() {
        return kielioppi;
    }

    public void setKielioppi(double kielioppi) {
        if (kielioppi > 30){
            kielioppi=30;
        }
        this.kielioppi = kielioppi;
        // Päivittää pisteet
        this.setPisteet(this.getPisteet());
    }

    public double getOikeinkirjoitus() {
        return oikeinkirjoitus;
    }

    public void setOikeinkirjoitus(double oikeinkirjoitus) {
        if (oikeinkirjoitus>20){
            oikeinkirjoitus=20;
        }
        this.oikeinkirjoitus = oikeinkirjoitus;
        // Päivittää pisteet
        this.setPisteet(this.getPisteet());
    }

    public double getOikea_pituus() {
        return oikea_pituus;
    }

    public void setOikea_pituus(double oikea_pituus) {
        if (oikea_pituus>20){
            oikea_pituus=20;
        }
        this.oikea_pituus = oikea_pituus;
        // Päivittää pisteet
        this.setPisteet(this.getPisteet());
    }

    public double getSisalto() {
        return sisalto;
    }

    public void setSisalto(double sisalto) {
        if (sisalto>30){
            sisalto=30;
        }
        this.sisalto = sisalto;
        // Päivittää pisteet
        this.setPisteet(this.getPisteet());
    }

    @Override
    public double getPisteet() {
        return this.kielioppi+this.oikea_pituus+
                this.sisalto+this.oikeinkirjoitus;
    }

    // Testipääohjelma
    public static void main(String[] args) {
        Kirjoitelma kir = new Kirjoitelma();
        kir.setKielioppi(25);
        kir.setOikeinkirjoitus(10);
        kir.setOikea_pituus(20);
        kir.setSisalto(30);
        System.out.println("Kirjoitelman pisteet tässä: " +kir.getPisteet()
                + " ja arvosana on " +kir.getArvosana());
    }
}


Tehtava 4.



public class Tentti implements Erinomainen {
    private double pisteet;

    public void setPisteet(double p) {
        this.pisteet = p;
    }

    public double getPisteet() {
        return this.pisteet;
    }

    public int getArvosana() {
        int arvosana;

        if (this.pisteet >= 90) {
            arvosana = 5;
        } else if (this.pisteet >= 80) {
            arvosana = 4;
        } else if (this.pisteet >= 70) {
            arvosana = 3;
        } else if (this.pisteet >= 60) {
            arvosana = 2;
        } else if (this.pisteet >= 50) {
            arvosana = 1;
        } else {
            arvosana = 0;
        }
        return arvosana;
    }

    // Tehtävä 4 jatkuu alle
    // Tulee rajapinnalta Erinomainen
    @Override
    public boolean onkoErinomainen() {
        return this.getArvosana()==5;
    }

    public static void main(String[] args) {
        Tentti t = new Tentti();
        t.setPisteet(98);
        System.out.print("Onko erinomainen: "+t.onkoErinomainen());
    }
}



// Rajapinta tässä
public interface Erinomainen {
    public boolean onkoErinomainen();
}


Tehtava 5.


import java.io.*;

// Lisätään Serializable joka suorittaa A kohdan
public class Ympyra implements Serializable {
    private double sade;
    public Ympyra(double r) {
        sade = r;
    }
    public double getAla() {
        return Math.PI * sade * sade;
    }
    public double getSade() {
        return sade;
    }
    public String toString() {
        return "Ympyrän säde on " + sade + " ja pinta-ala on " + getAla();
    }
    public boolean equals(Ympyra y) {
        if (this.sade == y.getSade())
            return true;
        else
            return false;
    }
    public boolean suurempiKuin(Ympyra y) {
        if (this.getAla() > y.getAla())
            return true;
        else
            return false;
    }
    // Muokataan testipääohjelmaa
    public static void main(String[] args) {
        // Luodaan 10 oliota ja sijoitetaan ne taulukkoon
        Ympyra[] ympyrat = new Ympyra[10];
        for (int i=0; i< ympyrat.length;i++){
            ympyrat[i]= new Ympyra(0.5*i);
        }
        // B kohdan tiedostonkirjoitus
        try (FileOutputStream fout = new FileOutputStream("Ympyrat.dat");
            ObjectOutputStream out = new ObjectOutputStream(fout)) {
            for (Ympyra ympyra: ympyrat) {
                out.writeObject(ympyra);
            }
            out.close();
            fout.close();
            System.out.println("Ympyrät kirjoitettu");
        } catch (IOException e) {
            e.printStackTrace();
        }
        // C kohta
        Ympyra[] luetutYmpyrät = new Ympyra[10];
        try (FileInputStream fis = new FileInputStream("Ympyrat.dat");
            ObjectInputStream ois = new ObjectInputStream(fis)) {
            Object o = null;
            int i = 0;
            while ((o = ois.readObject()) != null)   {
                if (o instanceof Ympyra)
                    luetutYmpyrät[i] = (Ympyra) o;
                i++;
            }
        // D kohdan Virhetilanteiden Catchit
        } catch (IOException e) {
            //Käsittele error
        } catch (ClassNotFoundException e) {
            //Käsittele error
        }
        for (Ympyra ympyra : luetutYmpyrät){
            System.out.println(ympyra);
        }
    }
}


Tehtava 6.

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Scanner;
import java.io.*;

public class Pankkiautomaatti {
    public Pankkitili[] tilit = new Pankkitili[10];
    // Tarkistetaan onko tilit.dat olemassa
    public Pankkiautomaatti() {
        if (Files.exists(Path.of("tilit.dat"))){
            try (FileInputStream fis = new FileInputStream("tilit.dat");
                ObjectInputStream ois = new ObjectInputStream(fis)) {
                Object o = null;
                int i = 0;
                while ((o = ois.readObject()) != null)   {
                    if (o instanceof Pankkitili)
                        this.tilit[i] = (Pankkitili) o;
                    i++;
                }
            } catch (IOException e) {
                //Käsittele error
            } catch (ClassNotFoundException e) {
                //Käsittele error
            }
        }
        // Jos tilit.dat ei ole olemassa
        else {
            for (int i = 0; i < 10; i++) {
                this.tilit[i] = new Pankkitili(100);
            }
        }
    }

    public void saldo(int i) {
        System.out.println("Tilin " + i + " saldo on " + this.tilit[i].getSaldo());
    }
    public void nosto(int i, double summa) {
        this.tilit[i].nosta(summa);
    }
    public void pano(int i, double summa) {
        this.tilit[i].talleta(summa);
    }

    public static void kysy_tilinumero() {
        System.out.println("Mitä tiliä haluat käsitellä (1-10, 0 = lopetus)");
    }

    public static void tulostaValikko() {
        System.out.println("Mitä haluat tehdä: ");
        System.out.println("1. saldon tarkistus");
        System.out.println("2. nosto");
        System.out.println("3. pano");
        System.out.println("4. poistu");
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String jatkatko;
        int valinta;
        int tili;
        double summa;
        boolean jatka;
        // alustetaan tilit
        Pankkiautomaatti pankki = new Pankkiautomaatti();
 
        do {
            kysy_tilinumero();
            tili = input.nextInt();
            if (tili > 0 && tili < 10) {
                jatka = true;

                do {
                    tulostaValikko();
                    valinta = input.nextInt();
                    switch (valinta) {
                        case 1: {
                            pankki.saldo(tili);
                            break;
                        }
                        case 2: {
                            System.out.println("Paljonko haluat nostaa?");
                            summa = input.nextDouble();
                            pankki.nosto(tili, summa);
                            break;
                        }

                        case 3: {
                            System.out.println("Paljonko talletat?");
                            summa = input.nextDouble();
                            pankki.pano(tili, summa);
                            break;
                        }

                        case 4:
                            jatka = false;
                    }
                } while (jatka);
            }

        } while (tili > 0 && tili < 10);
        try (FileOutputStream fout = new FileOutputStream("tilit.dat");
             ObjectOutputStream out = new ObjectOutputStream(fout)) {
            for (Pankkitili kirjoitatili : pankki.tilit) {
                out.writeObject(kirjoitatili);
            }
            out.close();
            fout.close();
            System.out.println("Tilien saldot kirjoitettu");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}





import java.io.Serializable;

public class Pankkitili implements Serializable {
    private double vuosiKorko;
    private double saldo;
    /**
     * Pankkiili alkusaldolla.
     * @param saldo
     */
    public Pankkitili(double saldo) {
        this.saldo = saldo;
    }
    public Pankkitili(Pankkitili tili) {
        this.saldo = tili.getSaldo();
    }
    /**
     * Vuosikoron asetus
     * @param vuosiKorko
     */
    public void setVuosiKorko(double vuosiKorko) {
        this.vuosiKorko = vuosiKorko;
    }

    /**
     * Summan talletus tilille.
     * @param summa
     */
    public void talleta(double summa) {
        if (summa > 0){
            this.saldo += summa;
            System.out.println("Talletettiin " + summa);
        }
        else
            System.out.println("Rahamaaran pitaa olla positiivinen arvo!");
    }
    /**
     * Summan nosto tililta.
     * @param summa
     */
    public void nosta(double summa) {
        if (summa < 0)
            System.out.println("Rahamaaran pitaa olla positiivinen arvo!");
        else if (summa <= this.saldo) {
            this.saldo -= summa;
            System.out.println("Nostettiin " + summa);
        }
        else {
            System.out.println("Tililla ei ole riittavasti katetta.");
            System.out.println("Nostettiin " + this.saldo);
            this.saldo = 0;

        }
    }
    /**
     * Kuukausikoron lisays.
     */
    public void lisaaKorko() {
        this.saldo += (this.saldo * this.vuosiKorko / 100.0) / 12;
    }
    /**
     * Saldon tarkistus.
     * @return
     */
    public double getSaldo() {
        return saldo;
    }
}
