####
Kaikki kooditehtävät on toteutettu niin, että ne toimivat yhdestä tiedostosta.
Ei tarvitse luoda erillistä tiedostoa pääluokalle ja toiselle luokalle.

######################################
TEHTÄVÄ 1:
######################################

class Kurssi {
    private int kurssikoodi;
    private double opintopisteet;
    public Kurssi(int kurssikoodi, double opintopisteet) {
        this.kurssikoodi = kurssikoodi;
        this.opintopisteet = opintopisteet;
    }
    public int getKurssikoodi() {
        return kurssikoodi;
    }
    public double getOpintopisteet() {
        return opintopisteet;
    }
    public boolean laaja() {
        if (this.opintopisteet > 5)
            return true;
        else
            return false;
    }

// ########## a-kohta ##########
    public String toString(){
        return kurssikoodi + " " + opintopisteet;
    }

// ########## b-kohta ##########
    public boolean equals(Kurssi olio) {
        boolean palautus = false;
        if ((olio.getKurssikoodi() == this.kurssikoodi) &&
                olio.getOpintopisteet() == this.opintopisteet)
            palautus = true;
        return palautus;
    }
// ########## c-kohta ##########
    public boolean suurempiKuin(Kurssi olio){
        boolean palautus = false;
        if (this.opintopisteet > olio.opintopisteet)
            palautus = true;
        return palautus;
    }
}

// ########## d-kohta ##########
public class Main {
    public static void main(String[] args) {
// ########## d i-kohta ##########
    Kurssi kurssi1 = new Kurssi(111, 1.1);
    Kurssi kurssi2 = new Kurssi(111, 1.1);
    Kurssi kurssi3 = new Kurssi(555, 5.5);

// ########## d ii-kohta ##########
    System.out.println("Kurssin 1 tiedot: " + kurssi1.toString());
    System.out.println("Kurssin 2 tiedot: " + kurssi2.toString());
    System.out.println("Kurssin 3 tiedot: " + kurssi3.toString());

// ########## d iii-kohta ##########
    System.out.println("Ovatko kurssit 1 ja 2 samanlaisia? " + kurssi1.equals(kurssi2));
    System.out.println("Ovatko kurssit 1 ja 3 samanlaisia? " + kurssi1.equals(kurssi3));
    System.out.println("Ovatko kurssit 2 ja 3 samanlaisia? " + kurssi2.equals(kurssi3));

// ########## d iv-kohta ##########
    Kurssi laajin = kurssi1;
    if (kurssi2.suurempiKuin(kurssi1) && kurssi2.suurempiKuin(kurssi3))
        laajin = kurssi2;
    else if (kurssi3.suurempiKuin(kurssi1) && kurssi3.suurempiKuin(kurssi2))
        laajin = kurssi3;
    System.out.println("Laajin kurssi on: " + laajin.toString());

// ########## d v-kohta ##########
    System.out.println("Onko kurssi 1 laaja? " + kurssi1.laaja());
    System.out.println("Onko kurssi 2 laaja? " + kurssi2.laaja());
    System.out.println("Onko kurssi 3 laaja? " + kurssi3.laaja());
    }
}


######################################
TEHTÄVÄ 2:
######################################


######################################
TEHTÄVÄ 3:
######################################

public class Suojaus {

// ########## a-kohta ##########
    private int salainen;
// ########## b-kohta ##########
    int puolinainen;
// ########## c-kohta ##########
    public Suojaus(int salainen, int puolinainen){
        this.salainen = salainen;
        this.puolinainen = puolinainen;
    }

// ########## d-kohta ##########
    public int getSalainen(){  return salainen;  }
    public int getPuolinainen(){  return puolinainen;  }
    public void setSalainen(int salainen){  this.salainen = salainen;  }
    public void setPuolinainen(int puolinainen){  this.puolinainen = puolinainen;  }
}

public class Main {
    public static void main(String[] args) {
// ########## e i-kohta ##########
    Suojaus sala = new Suojaus(1, 2);
    Suojaus julki = new Suojaus(3, 4);

// ########## e ii-kohta ##########
    // Tämä ei mene läpi kääntäjästä, koska kyseessä on salainen muuttuja:
    // System.out.println(sala.salainen());
    System.out.println(sala.puolinainen); // Tämä kyllä menee läpi.

// ########## e iii-kohta ##########
    // Hyvin onnistuu!
    System.out.println(julki.getSalainen());
    System.out.println(julki.getPuolinainen());

// ########## e iv-kohta ##########
    // sala.salainen = 5; // Tämä ei mene läpi!
    sala.puolinainen = 5; // Tämä onnistuu kyllä.
    System.out.println(sala.puolinainen);

// ########## e iv-kohta ##########
    julki.setSalainen(123);
    System.out.println(julki.getSalainen());
    julki.setPuolinainen(456);
    System.out.println(julki.getPuolinainen());
    }
}

######################################
TEHTÄVÄ 4:
######################################

public class SaaAsema {

// ########## a-kohta ##########
    private double lampotila;
// ########## b-kohta ##########
    private double paine;

// ########## c-kohta ##########
    public SaaAsema(){
        this.lampotila = 0;
        this.paine = 1;
    }

// ########## d-kohta ##########
    public SaaAsema(double lampotila, double paine){
        this.lampotila = lampotila;
        this.paine = paine;
    }

// ########## e-kohta ##########
    public static SaaAsema luoSaaAsema(double lampoFahr, double painePSI){
        SaaAsema outoOlio = new SaaAsema();
        outoOlio.setFahrenheit(lampoFahr);
        outoOlio.setPSI(painePSI);
        return outoOlio;
    }

// ########## f-kohta ##########
    public double getLampotila(){  return lampotila;  }
    public double getPaine(){  return paine;  }
    public void setLampotila(double lampotila){  this.lampotila = lampotila;  }
    public void setPaine(double paine){  this.paine = paine;  }

// ########## g-kohta ##########
    public double getFahrenheit(){  return (lampotila*1.8)+32;  }
    public double getPSI(){  return paine/0.0689475729;  }

// ########## h-kohta ##########
    public void setFahrenheit(double lampoFahr){
        this.lampotila = (lampoFahr-32)/1.8;
    }
    public void setPSI(double painePSI){
        this.paine = painePSI*0.0689475729;
    }

// ########## ekstraa helpottamaan testausta pääohjelmassa ##########
    public String toString(){
        String palautus = "\nLämpötila celsius-asteina on: " + lampotila +
                "\nLämpötila fahrenheit-asteina on: " + this.getFahrenheit() +
                "\nPaine baareina on: " + paine +
                "\nPaine PSI on: " + this.getPSI();
        return palautus;
    }
}

// ########## i-kohta ##########
public class Main {
    public static void main(String[] args) {
        // Testataan oletusalustaja
        SaaAsema oletusOlio = new SaaAsema();
        System.out.println("\noletusOlio" + oletusOlio);

        // Testataan parametroitava alustaja
        SaaAsema asemaSI = new SaaAsema(12.3, 1.034);
        System.out.println("\nasemaSI" + asemaSI);

        // Testataan fahrenheit + PSI alustaja/metodi
        SaaAsema asemaFahrPSI = SaaAsema.luoSaaAsema(33, 15);
        System.out.println("\nasemaFahrPSI" + asemaFahrPSI);

        // Testataan set- ja get-metodit SI-järjestelmän muuttujille
        oletusOlio.setLampotila(10);
        oletusOlio.setPaine(1.5);
        System.out.println("\nTämän pitäisi antaa 10: " + oletusOlio.getLampotila());
        System.out.println("Tämän pitäisi antaa 1.5: " + oletusOlio.getPaine());

        // Testataan set- ja get-metodit höpö-järjestelmän muuttujille
        oletusOlio.setFahrenheit(40);
        oletusOlio.setPSI(20);
        System.out.println("\nTämän pitäisi antaa 40: " + oletusOlio.getFahrenheit());
        System.out.println("Tämän pitäisi antaa 20: " + oletusOlio.getPSI());
    }
}


######################################
TEHTÄVÄ 5:
######################################

/**
 * Class/object representation of one customer's information.
 * This class doesn't have default constructor and it needs
 * to be constructed with parameters.
 *
 * @param   nimi    Customer's name
 * @param   osoite  Customer's address
 * @param   kengannumero    Customer's shoe size
 * @param   hatunkoko   Customer's hat size
 * @author Samu Moilanen
 */
public class Asiakas {

    // ########## a-kohta ##########
    private String nimi;
    private String osoite;
    private double kengannumero;
    private double hatunkoko;

    // ########## b-kohta ##########

    /**
     * Only constructor of this class.
     *
     * @param   nimi    Customer's name
     * @param   osoite  Customer's address
     * @param   kengannumero    Customer's shoe size
     * @param   hatunkoko   Customer's hat size
     */
    public Asiakas(String nimi, String osoite, double kengannumero, double hatunkoko){
        this.nimi = nimi;
        this.osoite = osoite;
        this.kengannumero = kengannumero;
        this.hatunkoko = hatunkoko;
    }

    // ########## c-kohta ##########
    public void setNimi(String nimi){  this.nimi = nimi;  }
    public void setOsoite(String osoite){  this.osoite = osoite;  }
    public void setKengannumero(double kengannumero){  this.kengannumero = kengannumero;  }
    public void setHatunkoko(double hatunkoko){  this.hatunkoko = hatunkoko;  }
    public String getNimi(){  return nimi;  }
    public String getOsoite(){ return osoite;  }
    public double getKengannumero(){  return kengannumero;  }
    public double getHatunkoko(){  return hatunkoko;  }

    // ########## d-kohta ##########
    public boolean equals(Asiakas verrokki){
        boolean palautus = false;
        if (
                this.nimi == verrokki.getNimi() &&
                        this.osoite == verrokki.getOsoite() &&
                        this.kengannumero == verrokki.getKengannumero() &&
                        this.hatunkoko == verrokki.getHatunkoko()
        )
            palautus = true;
        return palautus;
    }

    public Asiakas copy(){
        Asiakas palautus = new Asiakas(
                this.getNimi(),
                this.getOsoite(),
                this.getKengannumero(),
                this.getHatunkoko()
        );
        return palautus;
    }

    public String toString(){
        String palautus = "Asiakkaan nimi: " + this.nimi +
                "\nOsoite: " + this.osoite +
                "\nKengännumero: " + this.kengannumero +
                "\nHatunkoko: " + this.hatunkoko;
        return palautus;
    }
}


// ########## f-kohta ##########
public class Main {
    public static void main(String[] args) {
        // Luodaan kaksi oliota
        Asiakas asiakas1 = new Asiakas(
                "Matti Meikäläinen",
                "Mattilaisenkatu 1",
                43,
                50
        );
        Asiakas asiakas2 = new Asiakas(
                "Taatto Tötterstön",
                "Hakkaraisentie 666",
                36,
                43
        );

        // Kopioidaan toisen asiakkaan tiedot kolmanteen
        Asiakas asiakas3 = asiakas2.copy();

        // Tutkitaan yhtäsuuruutta
        System.out.println(
                "Ovatko asiakas1 ja asiakas2 samoja? " + asiakas1.equals(asiakas2) +
                "\nOvatko asiakas1 ja asiakas3 samoja? " + asiakas1.equals(asiakas3) +
                "\nOvatko asiakas2 ja asiakas3 samoja? " + asiakas2.equals(asiakas3)
        );

        // Tulostetaan kaikkien olioiden tiedot
        System.out.println("\n" + asiakas1);
        System.out.println("\n" + asiakas2);
        System.out.println("\n" + asiakas3);
    }
}

######################################
TEHTÄVÄ 6:
######################################

public class PankkitilitTaulukossa {
    public static void main(String[] args) {

// ########## a-kohta ##########
        Pankkitili [] taulukko = new Pankkitili[10];
// ########## b-kohta ##########
        Pankkitili tili1 = new Pankkitili(123456, 123.456, 3.5);
        Pankkitili tili2 = new Pankkitili(234567, 234.567, 3.5);
        Pankkitili tili3 = new Pankkitili(345678, 345.678, 3.5);
        taulukko[1] = tili1;
        taulukko[2] = tili2;
        taulukko[3] = tili3;

// ########## c-kohta ##########
// Asetetaan kaikkiin saldoksi sata.
        taulukko[1].setSaldo(100);
        taulukko[2].setSaldo(100);
        taulukko[3].setSaldo(100);
// Nostetaan vaiheleva määrä rahaa kaikilta tileiltä.
        taulukko[1].nosta(10);
        taulukko[2].nosta(20);
        taulukko[3].nosta(30);
// Lisätään rahaa kaikille tileille.
        taulukko[1].talleta(60);
        taulukko[2].talleta(50);
        taulukko[3].talleta(40);
// Tulostetaan lopuksi saldot.
        System.out.println("Tilin 1 saldo on: " + taulukko[1].getSaldo());
        System.out.println("Tilin 2 saldo on: " + taulukko[2].getSaldo());
        System.out.println("Tilin 3 saldo on: " + taulukko[3].getSaldo());
    }
}

import java.util.Date;
class Pankkitili {
    private int id;
    private double saldo;
    private double vuosiKorko;
    private Date luontiPaiva;

    public Pankkitili(){}
    public Pankkitili(int tiliNumero, double sal, double vuoKor){
        id = tiliNumero;
        saldo = sal;
        vuosiKorko = vuoKor;
        luontiPaiva = new Date();
    }

    public void setId(int tiliNumero) {  id = tiliNumero;  }
    public int getId() {  return id;  }
    public void setSaldo(double sal) {  saldo = sal;  }
    public double getSaldo() {  return saldo;  }
    public void setVuosiKorko(double kor) {  vuosiKorko = kor;  }
    public double getVuosiKorko() {  return vuosiKorko;  }

    public Date getLuontiPaiva() {  return luontiPaiva;  }

    public double getKuukausiKorkoProsentti() {  return vuosiKorko/12;  }
    public double getKuukausiKorko() {  return saldo*vuosiKorko/100/12;  }

    public void nosta(double nosto) {
        if (nosto <= saldo) {
            saldo -= nosto;
        }
    }

    public void talleta(double talletus) {  saldo += talletus;  }
}


######################################
TEHTÄVÄ 7:
######################################


